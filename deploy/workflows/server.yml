name: Server Build

on:
  workflow_call:
    inputs:
        env:
          required: true
          type: string
    secrets:
      GH_DODEKACOMCOM_TOKEN:
        required: true

jobs:
  build_server:
    runs-on: ubuntu-latest
    env:
      # The place the configuration repo will be placed at temporarily
      SERVER_REPO_PATH: 'dodekabackend'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: 'DSAV-Dodeka/backend'
          ref: 'main'
          token: ${{ secrets.GH_DODEKACOMCOM_TOKEN }}
          # Relative to ${{ github.workspace }}
          path: ${{ env.SERVER_REPO_PATH }}
      - run: pipx install poetry==1.4.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./build/container/server -t ./context -e ${{ inputs.env }}
          poetry run confspawn -c config.toml -s ./build/container/authpage -t ./contextauthpage -e ${{ inputs.env }}
      # First the lock file and project declaration are moved
      # Then the source is moved
      # Then the context for building authpage is prepared
      # dotglob is enabled to also allow the '.*' files to be moved
      # Finally configuration files for building authpage is moved (TEMP until confspawn option)
      - name: Move source
        run: |
          mv ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/poetry.lock ${{ github.workspace }}/context
          mv ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/pyproject.toml ${{ github.workspace }}/context
          mv ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/src ${{ github.workspace }}/context/src
          mv ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/authpage ${{ github.workspace }}/context/authpage
          shopt -s dotglob
          mv ${{ github.workspace }}/contextauthpage/* ${{ github.workspace }}/context/authpage
      - name: Cache authpage
        id: cached-authpage
        uses: actions/cache@v3
        with:
          key: authpage-${{ hashFiles(format('{0}/context/authpage', github.workspace)) }}
          path: ${{ github.workspace }}/context/src/apiserver/resources/static/credentials
      - uses: actions/setup-node@v3
        if: steps.cached-authpage.outputs.cache-hit != 'true'
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ github.workspace }}/context/authpage/package-lock.json
      - name: Build credentials
        if: ${{ (github.event_name == 'release' && github.event.action == 'published') || steps.cached-authpage.outputs.cache-hit != 'true' }}
        run: |
          npm install
          npm run build-mode -- --mode ${{ inputs.env }}
        working-directory: ${{ github.workspace }}/context/authpage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # *************************************************
      # ************** SET CONTAINER TAGS ***************
      # *************************************************
      ##### Set the base env vars we will need
      # We uniquely identify a commit with its short SHA
      - name: Commit SHA_SHORT
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # We need to use the image name in each tag, so we set that to an env as well
      - name: Image name
        run: echo "IMAGE_NM=$(poetry run confenv -c config.toml -v server.image_name -e ${{ inputs.env }})" >> $GITHUB_ENV
      
      ##### not-production will get :<env> and :<env>-<commit sha>, production only gets :<commit sha>
      ##### because for production the 'latest' should only be on a release
      - name: Set base env.IMAGE_TAG not production
        if: ${{ inputs.env != 'production' }}
        run: echo "IMAGE_TAG=$IMAGE_NM:${{ inputs.env }},$IMAGE_NM:${{ inputs.env }}-$SHA_SHORT" >> $GITHUB_ENV
      - name: Set base env.IMAGE_TAG for production
        if: ${{ inputs.env == 'production' }}
        run: echo "IMAGE_TAG=$IMAGE_NM:$SHA_SHORT" >> $GITHUB_ENV
      ##### we only run on a "release" (with type "published") or a "push" event. those have the following values
      #####       PUSH                                  RELEASE
      ##### github.event_name = 'push'    github.event_name = 'release'
      #####        N/A                    github.event.action = 'published'
      #####        N/A                    github.event.release.prerelease = 'true' / 'false'
      # for any release, if not production, we want to add the release name after the env
      - name: Set env.IMAGE_TAG if release and not production
        if: ${{ github.event_name == 'release' && inputs.env != 'production'  }}
        run: echo "IMAGE_TAG=$IMAGE_TAG,$IMAGE_NM:${{ inputs.env }}-${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      # if production, also set latest and the version number without the env
      - name: Add production tag if full release and production
        if: ${{ github.event_name == 'release' && !github.event.release.prerelease && inputs.env == 'production'  }}
        run: echo "IMAGE_TAG=$IMAGE_TAG,$IMAGE_NM:${{ github.event.release.tag_name }},$IMAGE_NM:latest" >> $GITHUB_ENV
      # ************** END SET CONTAINER TAGS ***************
      
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/context
          # Dockerfile tag
          file: ${{ github.workspace }}/context/server.Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          push: ${{ github.event_name != 'pull_request' }}
