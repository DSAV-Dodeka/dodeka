name: CI KV

on:
  push:
    branches: [ ci ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # Cache means install is saved in repo cache
    # Increment poetry-0 if new install is necessary
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local 
        key: poetry-0 
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        # .venv is created in project
        virtualenvs-in-project: true
        installer-parallel: true
    # Load .venv directly from cache
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        # Key only changes if poetry.lock changes
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    # Build config using tiptenbrink/confspawn
    - name: Config
      run: |
        poetry run python -c "from spawn_kv import spawn_librejson; spawn_librejson('configged')"
      working-directory: ${{ github.workspace }}/build
    - name: librejson.so
      run: |
        ./kv/librejson/configged/download_source.sh
      working-directory: ${{ github.workspace }}/build
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        # We use the repo/action token, which has specified access to the package
        username: ${{ github.actor}}
        password: ${{ github.token }}
    # Set up buildx for later build-push-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    # Get cached Docker layers to save build time
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildxkv-cache
        key: ${{ runner.os }}-buildxkv-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildxkv-
    # Build and push
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ github.workspace }}/build/kv
        # Dockerfile tag, TODO load from config in the future
        tags: 'ghcr.io/dsav-dodeka/redis:latest'
        cache-from: type=local,src=/tmp/.buildxkv-cache
        cache-to: type=local,dest=/tmp/.buildxkv-cache-new,mode=max
        push: true
    - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildxkv-cache
          mv /tmp/.buildxkv-cache-new /tmp/.buildx-cache
