name: KV Build

on:
  workflow_call:
    inputs:
        env:
          required: true
          type: string

permissions:
  packages: write
  contents: read

jobs:
  build-kv:
    runs-on: ubuntu-latest
    # In case of production only run when it is a non-prerelease release
    if: ${{ inputs.env != 'production' || (github.event_name == 'release' && !github.event.release.prerelease) }}
    defaults:
      run:
        working-directory: deploy
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry==1.7.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
          cache-dependency-path: deploy/poetry.lock
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./build/container/kv -t ./context -e ${{ inputs.env }}
          poetry run confspawn -c config.toml -s ./build/container/librejson -t ./contextlibrejson  -e ${{ inputs.env }}
      # Set env from config.toml
      - name: Set env.REJSON_VERSION
        run: |
          export REJSON_VERSION=$(poetry run confenv -c config.toml -v kv.redisjson_version)
          echo "REJSON_VERSION=$REJSON_VERSION" >> $GITHUB_ENV
      # If librejson was previously built and stored in cache, use it
      - name: Load cached librejson.so
        id: cached-librejson
        uses: actions/cache@v3
        with:
          path: deploy/context/librejson.so
          key: rejson_module-${{ env.REJSON_VERSION }}
      - name: librejson.so
        # If cache was not found, rebuild
        # Requires GH login
        if: steps.cached-librejson.outputs.cache-hit != 'true'
        run: |
          echo "${{ github.token }}" | gh auth login --with-token
          ./contextlibrejson/build_librejson.sh
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # *************************************************
      # ************** SET CONTAINER TAGS ***************
      # *************************************************
      ##### Set the base env vars we will need
      # We uniquely identify a commit with its short SHA
      - name: Commit SHA_SHORT
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # We need to use the image name in each tag, so we set that to an env as well
      - name: Image name
        run: echo "IMAGE_NM=$(poetry run confenv -c config.toml -v kv.image_name -e ${{ inputs.env }})" >> $GITHUB_ENV
      
      ##### not-production will get :<env> and :<env>-<commit sha>, production only gets :<commit sha>
      ##### because for production the 'latest' should only be on a release
      - name: Set base env.IMAGE_TAG not production
        if: ${{ inputs.env != 'production' }}
        run: echo "IMAGE_TAG=$IMAGE_NM:${{ inputs.env }},$IMAGE_NM:${{ inputs.env }}-$SHA_SHORT" >> $GITHUB_ENV
      - name: Set base env.IMAGE_TAG for production
        if: ${{ inputs.env == 'production' }}
        run: echo "IMAGE_TAG=$IMAGE_NM:$SHA_SHORT" >> $GITHUB_ENV
      ##### we only run on a "release" (with type "published") or a "push" event. those have the following values
      #####       PUSH                                  RELEASE
      ##### github.event_name = 'push'    github.event_name = 'release'
      #####        N/A                    github.event.action = 'published'
      #####        N/A                    github.event.release.prerelease = 'true' / 'false'
      # for any release, if not production, we want to add the release name after the env
      - name: Set env.IMAGE_TAG if release and not production
        if: ${{ github.event_name == 'release' && inputs.env != 'production'  }}
        run: echo "IMAGE_TAG=$IMAGE_TAG,$IMAGE_NM:${{ inputs.env }}-${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      # if production, also set latest and the version number without the env
      - name: Add production tag if full release and production
        if: ${{ github.event_name == 'release' && !github.event.release.prerelease && inputs.env == 'production'  }}
        run: echo "IMAGE_TAG=$IMAGE_TAG,$IMAGE_NM:${{ github.event.release.tag_name }},$IMAGE_NM:latest" >> $GITHUB_ENV
      # ************** END SET CONTAINER TAGS ***************

      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: deploy/context
          # Dockerfile tag
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          push: ${{ github.event_name != 'pull_request' }}