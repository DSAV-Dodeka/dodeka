name: KV Build

on:
  workflow_call:
    inputs:
        env:
          required: true
          type: string

jobs:
  build-kv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./build/container/kv -t ./context -e ${{ inputs.env }}
          poetry run confspawn -c config.toml -s ./build/container/librejson -t ./contextlibrejson  -e ${{ inputs.env }}
      # Set env from config.toml
      - name: Set env.REJSON_VERSION
        run: |
          export REJSON_VERSION=$(poetry run confenv -c config.toml -v kv.redisjson_version)
          echo "REJSON_VERSION=$REJSON_VERSION" >> $GITHUB_ENV
      # If librejson was previously built and stored in cache, use it
      - name: Load cached librejson.so
        id: cached-librejson
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/context/librejson.so
          key: rejson_module-${{ env.REJSON_VERSION }}
      - name: librejson.so
        # If cache was not found, rebuild
        # Requires GH login
        if: steps.cached-librejson.outputs.cache-hit != 'true'
        run: |
          echo "${{ github.token }}" | gh auth login --with-token
          ./contextlibrejson/build_librejson.sh
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Set env from config.toml
      - name: Set env.KV_TAG
        if: ${{ inputs.env != 'production' || github.event_name != 'release' || github.event.action != 'published' }}
        run: |
          export KV_IMAGE=$(poetry run confenv -c config.toml -v kv.image_name)
          export KV_VERSION=$(poetry run confenv -c config.toml -v confspawn_env.version -e ${{ inputs.env }})
          echo "KV_TAG=$KV_IMAGE:$KV_VERSION" >> $GITHUB_ENV
      - name: Set env.KV_TAG if release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' && inputs.env == 'production' }}
        run: |
          export KV_IMAGE=$(poetry run confenv -c config.toml -v kv.image_name)
          echo "KV_TAG=$KV_IMAGE:${{ github.event.release.tag_name }},$KV_IMAGE:latest" >> $GITHUB_ENV
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ github.workspace }}/context
          # Dockerfile tag
          tags: ${{ env.KV_TAG }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          push: ${{ github.event_name != 'pull_request' }}