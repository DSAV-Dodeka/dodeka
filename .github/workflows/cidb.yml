name: CI DB

on:
  push:
    branches: [ ci ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local 
        key: poetry-0 
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    - name: Build
      run: |
        cd build
        ./build_db.sh
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: tiptenbrink
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Push
      run: |
        docker push ghcr.io/tiptenbrink/postgres:latest
        
  deploy:

    runs-on: ubuntu-latest
    
    env:
      DB_ENV_PASS: ${{ secrets.DB_ENV_PASS }}

    steps:
    - uses: actions/checkout@v2
    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@master
      with:
        host: "dodeka.tipten.nl"
        username: "dodekatest"
        key: ${{ secrets.SSH_PRIVATE_KEY_DODEKATEST }}
        port: ${{ secrets.SSH_DODEKATEST_PORT }}
        envs: DB_ENV_PASS
        script: |
          export DEPLOYID="$(date +%s)"
          gh repo clone DSAV-Dodeka/dodeka ~/deployments/deploy$DEPLOYID
          gh repo clone DSAV-Dodeka/secrets ~/deployments/secrets$DEPLOYID
          cd ~/deployments/secrets$DEPLOYID
          . decrypt.sh secretdb.env.gpg $DB_ENV_PASS
          echo $TEST_SECRET
