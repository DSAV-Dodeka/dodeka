name: CI DB

on:
  push:
    branches: [ ci ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local 
        key: poetry-0 
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    - name: Config
      run: |
        poetry run python -c "from spawn_db import spawn_build; spawn_build('configged')"
      working-directory: ${{ github.workspace }}/build
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor}}
        password: ${{ github.token }}
    # Set up buildx for later build-push-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    # Get cached Docker layers to save build time
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    # Build up until the tiauthbuilder stage (i.e. including all dependencies)
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ github.workspace }}/build/db/configged
        # Dockerfile stage
        tags: ghcr.io/dodeka/postgres:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        push: true
    - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#
#    env:
#      DB_ENV_PASS: ${{ secrets.DB_ENV_PASS }}
#      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
#
#    steps:
#    - uses: actions/checkout@v2
#    - name: executing remote ssh commands using ssh key
#      uses: appleboy/ssh-action@1a8b3784eaa665f677fa114edd5683bb6a6bfaa8
#      with:
#        host: "dodeka.tipten.nl"
#        username: "dodekatest"
#        key: ${{ secrets.SSH_PRIVATE_KEY_DODEKATEST }}
#        port: ${{ secrets.SSH_DODEKATEST_PORT }}
#        envs: DB_ENV_PASS,GHCR_TOKEN
#        script_stop: true
#        script: |
#          export DEPLOYID="$(date +%s)"
#          gh repo clone DSAV-Dodeka/dodeka ~/deployments/deploy$DEPLOYID
#          gh repo clone DSAV-Dodeka/secrets ~/deployments/secrets$DEPLOYID
#          cd ~/deployments/secrets$DEPLOYID
#          set -a
#          . decrypt.sh secretdb.env.gpg $DB_ENV_PASS
#          echo $TEST_SECRET
#          echo $GHCR_TOKEN | docker login ghcr.io -u tiptenbrink --password-stdin
#          cd ~/deployments/deploy$DEPLOYID/deploy
#          ./deploy.sh
