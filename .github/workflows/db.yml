name: DB Build

on:
  workflow_call:
    inputs:
        env:
          required: true
          type: string

jobs:
  build_db:
    runs-on: ubuntu-latest

    steps:
      # Third party GH Action, pinned to commit for security
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - run: pipx install poetry==1.2.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./build/container/db -t ./context -e ${{ inputs.env }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Set env from config.toml
      - name: Set env.DB_TAG
        if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
        run: |
          export DB_IMAGE=$(poetry run confenv -c config.toml -v db.image_name -e ${{ inputs.env }})
          export DB_VERSION=$(poetry run confenv -c config.toml -v confspawn_env.version -e ${{ inputs.env }})
          echo "DB_TAG=$DB_IMAGE:$DB_VERSION" >> $GITHUB_ENV
      - name: Set env.DB_TAG if release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        run: |
          export DB_IMAGE=$(poetry run confenv -c config.toml -v db.image_name)
          echo "DB_TAG=$DB_IMAGE:${{ github.event.release.tag_name }},$DB_IMAGE:latest" >> $GITHUB_ENV
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/context
          # Dockerfile tag
          tags: ${{ env.DB_TAG }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          push: ${{ github.event_name != 'pull_request' }}
