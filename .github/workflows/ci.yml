name: CI

on:
  push:
    branches: [ ci ]
  pull_request:
  release:
    types: [ published ]

jobs:
  config-deploy:
    if: ${{ false }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - run: pipx install poetry==1.2.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./db/deploy -t ../use/deploydb
          poetry run confspawn -c config.toml -s ./db -t ./db/configged
          poetry run confspawn -c config.toml -s ./kv/deploy -t ../use/deploykv
          poetry run confspawn -c config.toml -s ./dev -t ../use/dev
          poetry run confspawn -c config.toml -s ./db/deploy -t ../use/dev/deploydb
          poetry run confspawn -c config.toml -s ./kv/deploy -t ../use/dev/deploykv
          poetry run confspawn -c config.toml -s ./server/deploy -t ../use/deployserver
          poetry run confspawn -c config.toml -s ./test_sync -t ../data -r
        working-directory: ${{ github.workspace }}/build
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: github.event_name != 'pull_request'
        with:
          commit_message: Config build (automated)
          file_pattern: use/



  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.2.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confrecipe -r build/deploy/staging/staging.toml -e staging
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: github.event_name != 'pull_request'
        with:
          commit_message: Config build (automated)
          file_pattern: use/

  build_db:
    # if: ${{ false }}
    uses: DSAV-Dodeka/dodeka/.github/workflows/db.yml@ci
    with:
      env: 'staging'

  build_server:
    uses: DSAV-Dodeka/dodeka/.github/workflows/server.yml@ci
    with:
      env: 'staging'
    secrets:
      GH_DODEKACOMCOM_TOKEN: ${{ secrets.GH_DODEKACOMCOM_TOKEN }}

  build_kv:
    if: ${{ false }}
    uses: DSAV-Dodeka/dodeka/.github/workflows/kv.yml@ci
    with:
      env: 'staging'
      
