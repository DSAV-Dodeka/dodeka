name: CI

on:
  push:
    branches: [ ci ]
  pull_request:
  release:
    types: [ published ]

jobs:
  config-deploy:
    if: ${{ false }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - run: pipx install poetry==1.2.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confspawn -c config.toml -s ./db/deploy -t ../use/deploydb
          poetry run confspawn -c config.toml -s ./db -t ./db/configged
          poetry run confspawn -c config.toml -s ./kv/deploy -t ../use/deploykv
          poetry run confspawn -c config.toml -s ./dev -t ../use/dev
          poetry run confspawn -c config.toml -s ./db/deploy -t ../use/dev/deploydb
          poetry run confspawn -c config.toml -s ./kv/deploy -t ../use/dev/deploykv
          poetry run confspawn -c config.toml -s ./server/deploy -t ../use/deployserver
          poetry run confspawn -c config.toml -s ./test_sync -t ../data -r
        working-directory: ${{ github.workspace }}/build
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: github.event_name != 'pull_request'
        with:
          commit_message: Config build (automated)
          file_pattern: use/

  build-kv:
    runs-on: ubuntu-latest
    if: ${{ false }}
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    # Cache means install is saved in repo cache
    # Increment poetry-1 if new install is necessary
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local 
        key: poetry-2
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        # .venv is created in project
        virtualenvs-in-project: true
        installer-parallel: true
    # Load .venv directly from cache
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        # Key only changes if poetry.lock changes
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    # Build config using tiptenbrink/confspawn
    - name: Config
      run: |
        poetry run confspawn -c config.toml -s ./kv/librejson -t ./kv/librejson/configged
      working-directory: ${{ github.workspace }}/build
    # Set env from config.toml
    - name: Set env.REJSON_VERSION
      run: |
        export REJSON_VERSION=$(poetry run confenv -c config.toml -v kv.redisjson_version)
        echo "REJSON_VERSION=$REJSON_VERSION" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}/build
    # If librejson was previously built and stored in cache, use it
    - name: Load cached librejson.so
      id: cached-librejson
      uses: actions/cache@v2
      with:
        path: build/kv/librejson.so
        key: rejson_module-${{ env.REJSON_VERSION }}
    - name: librejson.so
      # If cache was not found, rebuild
      # Requires GH login
      if: steps.cached-librejson.outputs.cache-hit != 'true'
      run: |
        echo "${{ github.token }}" | gh auth login --with-token
        ./kv/librejson/configged/build_librejson.sh
      working-directory: ${{ github.workspace }}/build
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        # We use the repo/action token, which has specified access to the package
        username: ${{ github.actor}}
        password: ${{ github.token }}
    # Set up buildx for later build-push-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    # Get cached Docker layers to save build time
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildxkv-cache
        key: ${{ runner.os }}-buildxkv-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildxkv-
    # Set env from config.toml
    - name: Set env.KV_TAG
      if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
      run: |
        export KV_IMAGE=$(poetry run confenv -c config.toml -v kv.image_name)
        export KV_VERSION=$(poetry run confenv -c config.toml -v kv.version)
        echo "KV_TAG=$KV_IMAGE:$KV_VERSION" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}/build
    - name: Set env.KV_TAG if release
      if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      run: |
        export KV_IMAGE=$(poetry run confenv -c config.toml -v kv.image_name)
        echo "KV_TAG=$KV_IMAGE:${{ github.event.release.tag_name }},$KV_IMAGE:latest" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}/build
    # Build and push
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ github.workspace }}/build/kv
        # Dockerfile tag
        tags: ${{ env.KV_TAG }}
        cache-from: type=local,src=/tmp/.buildxkv-cache
        cache-to: type=local,dest=/tmp/.buildxkv-cache-new,mode=max
        push: ${{ github.event_name != 'pull_request' }}
    - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildxkv-cache
          mv /tmp/.buildxkv-cache-new /tmp/.buildxkv-cache

  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.2.1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run confrecipe -r build/deploy/staging/staging.toml -e staging
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: github.event_name != 'pull_request'
        with:
          commit_message: Config build (automated)
          file_pattern: use/

  build-db:
    uses: DSAV-Dodeka/dodeka/.github/workflows/def.yml@ci
    with:
      env: 'staging'
      

  build-server-deps:
    runs-on: ubuntu-latest
    if: ${{ false }}
    env:
      # The place the configuration repo will be placed at temporarily
      SERVER_REPO_PATH: 'dodekabackend'

    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: 'DSAV-Dodeka/backend'
          ref: 'main'
          token: ${{ secrets.GH_DODEKACOMCOM_TOKEN }}
          # Relative to ${{ github.workspace }}
          path: ${{ env.SERVER_REPO_PATH }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      # Cache means install is saved in repo cache
      # Increment poetry-1 if new install is necessary
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-2
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          # .venv is created in project
          virtualenvs-in-project: true
          installer-parallel: true
      # Load .venv directly from cache
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          # Key only changes if poetry.lock changes
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Get cached Docker layers to save build time
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildxdeps-cache
          key: ${{ runner.os }}-buildxdeps-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxdeps-
      # Set env from config.toml
      - name: Set env.DEPS_TAG
        if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
        run: |
          export DEPS_IMAGE=$(poetry run confenv -c config.toml -v server.deps_image_name)
          export SERVER_VERSION=$(poetry run confenv -c config.toml -v server.version)
          echo "DEPS_TAG=$DEPS_IMAGE:$SERVER_VERSION" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
      - name: Set env.DEPS_TAG if release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        run: |
          export DEPS_IMAGE=$(poetry run confenv -c config.toml -v server.deps_image_name)
          echo "DEPS_TAG=$DEPS_IMAGE:${{ github.event.release.tag_name }},$DEPS_IMAGE:latest" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}
          file: ${{ github.workspace }}/build/server/server-deps.Dockerfile
          # Dockerfile tag
          tags: ${{ env.DEPS_TAG }}
          cache-from: type=local,src=/tmp/.buildxdeps-cache
          cache-to: type=local,dest=/tmp/.buildxdeps-cache-new,mode=max
          push: ${{ github.event_name != 'pull_request' }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildxdeps-cache
          mv /tmp/.buildxdeps-cache-new /tmp/.buildxdeps-cache

  build-server:
    needs: build-server-deps
    runs-on: ubuntu-latest
    env:
      # The place the configuration repo will be placed at temporarily
      SERVER_REPO_PATH: 'dodekabackend'

    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: 'DSAV-Dodeka/backend'
          ref: 'main'
          token: ${{ secrets.GH_DODEKACOMCOM_TOKEN }}
          # Relative to ${{ github.workspace }}
          path: ${{ env.SERVER_REPO_PATH }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      # Cache means install is saved in repo cache
      # Increment poetry-1 if new install is necessary
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-2
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          # .venv is created in project
          virtualenvs-in-project: true
          installer-parallel: true
      # Load .venv directly from cache
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          # Key only changes if poetry.lock changes
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Build config with correct version
        run: |
          poetry run confspawn -c config.toml -s ./server -t ./server/configged
          mv ${{ github.workspace }}/build/server/configged/entrypoint.sh ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/entrypoint.sh
        working-directory: ${{ github.workspace }}/build
      - name: Cache authpage
        id: cached-authpage
        uses: actions/cache@v2
        with:
          key: authpage-${{ hashFiles('${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/authpage') }}
          path: ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/src/dodekaserver/resources/static/credentials
      - uses: actions/setup-node@v2
        if: steps.cached-authpage.outputs.cache-hit != 'true'
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/authpage/package-lock.json
      - name: Build credentials
        if: steps.cached-authpage.outputs.cache-hit != 'true'
        run: |
          npm install
          npm run build
        working-directory: ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}/authpage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Get cached Docker layers to save build time
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildxserver-cache
          key: ${{ runner.os }}-buildxserver-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxserver-
      # Set env from config.toml
      - name: Set env.SERVER_TAG
        if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
        run: |
          export SERVER_IMAGE=$(poetry run confenv -c config.toml -v server.image_name)
          export SERVER_VERSION=$(poetry run confenv -c config.toml -v server.version)
          echo "SERVER_TAG=$SERVER_IMAGE:$SERVER_VERSION" >> $GITHUB_ENV
          echo "DOCKERFILE=version.Dockerfile" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
      - name: Set env.SERVER_TAG if release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        run: |
          export SERVER_IMAGE=$(poetry run confenv -c config.toml -v server.image_name)
          echo "SERVER_TAG=$SERVER_IMAGE:${{ github.event.release.tag_name }},$SERVER_IMAGE:latest" >> $GITHUB_ENV
          echo "DOCKERFILE=latest.Dockerfile" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/${{ env.SERVER_REPO_PATH }}
          file: ${{ github.workspace }}/build/server/configged/${{ env.DOCKERFILE }}
          # Dockerfile tag
          tags: ${{ env.SERVER_TAG }}
          cache-from: type=local,src=/tmp/.buildxserver-cache
          cache-to: type=local,dest=/tmp/.buildxserver-cache-new,mode=max
          push: ${{ github.event_name != 'pull_request' }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildxserver-cache
          mv /tmp/.buildxserver-cache-new /tmp/.buildxserver-cache 
