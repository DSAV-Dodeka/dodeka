name: CI

on:
  push:
    branches: [ ci ]
  pull_request:
  release:
    types: [ published ]

jobs:
  config-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      # Third party GH Action, pinned to commit for security
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          # Cache means install is saved in repo cache
          # Increment poetry-0 if new install is necessary
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          # .venv is created in project
          virtualenvs-in-project: true
          installer-parallel: true
      # Load .venv directly from cache
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          # Key only changes if poetry.lock changes
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run python -c "from spawn_db import spawn_deploy; spawn_deploy()"
          poetry run python -c "from spawn_db import spawn_build; spawn_build('configged')"
          poetry run python -c "from spawn_kv import spawn_deploy; spawn_deploy()"
          poetry run python -c "from spawn_dev import spawn_dev; spawn_dev()"
          poetry run python -c "from spawn_back import spawn_backend; spawn_backend()"
          poetry run python -c "from spawn_sync import spawn_test_sync; spawn_test_sync()"
        working-directory: ${{ github.workspace }}/build
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: github.event_name != 'pull_request'
        with:
          commit_message: Config build (automated)
          file_pattern: use/

  build-kv:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # Cache means install is saved in repo cache
    # Increment poetry-0 if new install is necessary
    - name: Load cached Poetry installation
      uses: actions/cache@v2
      with:
        path: ~/.local 
        key: poetry-0 
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        # .venv is created in project
        virtualenvs-in-project: true
        installer-parallel: true
    # Load .venv directly from cache
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        # Key only changes if poetry.lock changes
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install library
      run: poetry install --no-interaction
    # Build config using tiptenbrink/confspawn
    - name: Config
      run: |
        poetry run python -c "from spawn_kv import spawn_librejson; spawn_librejson('configged')"
      working-directory: ${{ github.workspace }}/build
    # Set env from config.toml
    - name: Set env.REJSON_VERSION
      run: |
        export REJSON_VERSION=$(./config_load.sh 'default.kv' 'redisjson_version')
        echo "REJSON_VERSION=$REJSON_VERSION" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}/build
    # If librejson was previously built and stored in cache, use it
    - name: Load cached librejson.so
      id: cached-librejson
      uses: actions/cache@v2
      with:
        path: build/kv/librejson.so
        key: rejson_module-${{ env.REJSON_VERSION }}
    - name: librejson.so
      # If cache was not found, rebuild
      # Requires GH login
      if: steps.cached-librejson.outputs.cache-hit != 'true'
      run: |
        echo "${{ github.token }}" | gh auth login --with-token
        ./kv/librejson/configged/build_librejson.sh
      working-directory: ${{ github.workspace }}/build
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        # We use the repo/action token, which has specified access to the package
        username: ${{ github.actor}}
        password: ${{ github.token }}
    # Set up buildx for later build-push-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    # Get cached Docker layers to save build time
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildxkv-cache
        key: ${{ runner.os }}-buildxkv-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildxkv-
    # Set env from config.toml
    - name: Set env.KV_TAG
      if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
      run: |
        export KV_IMAGE=$(./config_load.sh 'default.kv' 'image_name')
        export KV_VERSION=$(./config_load.sh 'default.kv' 'version')
        echo "KV_TAG=$KV_IMAGE:$KV_VERSION" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}/build
    - name: Set env.KV_TAG if release
      if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      run: |
        export KV_IMAGE=$(./config_load.sh 'default.kv' 'image_name')
        echo "KV_TAG=$KV_IMAGE:${{ github.event.release.tag_name }},$KV_IMAGE:latest" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
    # Build and push
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ github.workspace }}/build/kv
        # Dockerfile tag
        tags: ${{ env.KV_TAG }}
        cache-from: type=local,src=/tmp/.buildxkv-cache
        cache-to: type=local,dest=/tmp/.buildxkv-cache-new,mode=max
        push: ${{ github.event_name != 'pull_request' }}
    - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildxkv-cache
          mv /tmp/.buildxkv-cache-new /tmp/.buildxkv-cache

  build-db:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      # Cache means install is saved in repo cache
      # Increment poetry-0 if new install is necessary
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          # .venv is created in project
          virtualenvs-in-project: true
          installer-parallel: true
      # Load .venv directly from cache
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          # Key only changes if poetry.lock changes
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      # Build config using tiptenbrink/confspawn
      - name: Config
        run: |
          poetry run python -c "from spawn_db import spawn_build; spawn_build('configged')"
        working-directory: ${{ github.workspace }}/build
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          # We use the repo/action token, which has specified access to the package
          username: ${{ github.actor}}
          password: ${{ github.token }}
      # Set up buildx for later build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Get cached Docker layers to save build time
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # Set env from config.toml
      - name: Set env.DB_TAG
        if: ${{ github.event_name != 'release' || github.event.action != 'published' }}
        run: |
          export DB_IMAGE=$(./config_load.sh 'default.db' 'image_name')
          export DB_VERSION=$(./config_load.sh 'default.db' 'version')
          echo "DB_TAG=$DB_IMAGE:$DB_VERSION" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/build
      - name: Set env.DB_TAG if release
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        run: |
          export DB_IMAGE=$(./config_load.sh 'default.db' 'image_name')
          echo "DB_TAG=$DB_IMAGE:${{ github.event.release.tag_name }},$DB_IMAGE:latest" >> $GITHUB_ENV
          working-directory: ${{ github.workspace }}/build
      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/build/db/configged
          # Dockerfile tag
          tags: ${{ env.DB_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          push: ${{ github.event_name != 'pull_request' }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
